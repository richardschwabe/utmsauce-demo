{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","Date","startDate","setStartDate","url","setUrl","campaignName","setCampaignName","places","setPlaces","linkList","setLinkList","toggleSourceMedium","value","newPlaces","sharePlaces","name","map","i","place","val","toLowerCase","className","type","onClick","onChange","event","target","placeholder","selected","date","console","log","campaignIdentifierDateString","dateFormat","addedPlaces","Object","keys","filter","utmStartChar","indexOf","urlUTMCampaignPart","urls","splittedItem","split","urlUTMSource","urlUTMMedium","finalUrl","push","length","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a75ef39.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport dateFormat from \"dateformat\";\n\nfunction App() {\n  const shareConfig = [\n    {\n      name: \"Facebook\",\n      places: [\"post\", \"story\", \"ad\"],\n    },\n    {\n      name: \"Instagram\",\n      places: [\"story\", \"profile\"],\n    },\n    {\n      name: \"newsletter\",\n      places: [\"main\"],\n    },\n  ];\n\n  const [startDate, setStartDate] = useState(new Date());\n  const [url, setUrl] = useState(\"\");\n  const [campaignName, setCampaignName] = useState(\"\");\n  const [places, setPlaces] = useState({})\n\n  const [linkList, setLinkList] = useState([])\n\n  const handleUrlChange = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const handleCampaignChange = (event) => {\n    setCampaignName(event.target.value);\n  };\n\n  const generateLinks = () => {\n    console.log(\"Generating\", url, campaignName);\n    let campaignIdentifierDateString = dateFormat(startDate, \"yyyymmdd\");\n    console.log(campaignIdentifierDateString);\n    \n    console.log(\"Original places\", places)\n    let addedPlaces = Object.keys(places).filter(i =>  places[i] === 1)\n\n    console.log(addedPlaces);\n\n    let utmStartChar = \"?\"\n    if ( url.indexOf(\"?\") > -1){\n      utmStartChar = \"&\"\n    }\n\n    let newLinkList = []\n    let urlUTMCampaignPart = `${utmStartChar}utm_campaign=${campaignIdentifierDateString}-${campaignName}`\n    \n    let urls = []\n    addedPlaces.map(i => {\n      let splittedItem = i.split(\"-\")\n      let urlUTMSource = splittedItem[0]\n      let urlUTMMedium = splittedItem[1]\n      let finalUrl = `${urlUTMCampaignPart}&utm_source=${urlUTMSource}&utm_medium=${urlUTMMedium}`\n      urls.push(url + finalUrl)\n    })\n    setLinkList(urls)\n  };\n\n  const toggleSourceMedium = (value) => {\n    const newPlaces = {...places}\n    if (value in newPlaces){\n      newPlaces[value] = 0\n    } else {\n      newPlaces[value] = 1\n    }\n    setPlaces(newPlaces)\n  };\n\n  const sharePlaces = shareConfig.map((i) => {\n    let places = i.places.map((place) => {\n      let val = `${i.name.toLowerCase()}-${place.toLowerCase()}`;\n\n      return (\n        <div className=\"inline field\" key={val}>\n          <input type=\"checkbox\" onClick={() => toggleSourceMedium(val)} />\n          <label className=\"ui checkbox\">{place}</label>\n        </div>\n      );\n    });\n\n    return (\n      <div className=\"inline field\" key={i.name}>\n        <h3>{i.name}</h3>\n        {places}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"ui container\">\n      <h1>URL</h1>\n      <div className=\"ui input fluid\">\n        <input\n          onChange={handleUrlChange}\n          value={url}\n          type=\"text\"\n          placeholder=\"URL....\"\n        />\n      </div>\n      <h2>What is the campaign name?</h2>\n      <div className=\"ui input fluid\">\n        <input\n          type=\"text\"\n          placeholder=\"Campaign Name\"\n          value={campaignName}\n          onChange={handleCampaignChange}\n        />\n      </div>\n\n      <h2>Choose Campaign Source & Medium</h2>\n      <div className=\"ui form\">{sharePlaces}</div>\n\n      <h2>When will the campaign run?</h2>\n      <DatePicker\n        selected={startDate}\n        onChange={(date) => setStartDate(date)}\n      />\n\n      <h2>Finalise</h2>\n      <button className=\"ui button primary\" onClick={generateLinks}>\n        Generate\n      </button>\n\n      <h2>Results</h2>\n      {linkList.length > 0 ? (\n        <ul className=\"results\">{linkList.map(item => <li>{item}</li>)}</ul>\n      ) : (\n        <span>Generate some links first...</span>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}