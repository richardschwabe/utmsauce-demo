{"version":3,"sources":["components/PlaceSelector/PlaceSelector.js","components/Copyright/Copyright.js","App.js","reportWebVitals.js","index.js"],"names":["PlaceSelector","props","sharePlaces","shareConfig","map","i","places","place","val","name","toLowerCase","type","onClick","toggleItem","className","icon","network","toUpperCase","Copyright","href","target","App","useState","Date","startDate","setStartDate","url","setUrl","campaignName","setCampaignName","setPlaces","linkList","setLinkList","onChange","event","value","placeholder","selected","date","newPlaces","console","log","campaignIdentifierDateString","dateFormat","addedPlaces","Object","keys","filter","utmStartChar","indexOf","urlUTMCampaignPart","urls","splittedItem","split","urlUTMSource","urlUTMMedium","finalUrl","push","length","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5b77166.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./PlaceSelector.scss\"\r\n\r\nimport  { SocialIcon } from \"react-social-icons\"\r\n\r\nimport shareConfig from \"../../shareplaces.json\"\r\n\r\nexport default function PlaceSelector(props) {\r\n    \r\n  const sharePlaces = shareConfig.map((i) => {\r\n    let places = i.places.map((place) => {\r\n      let val = `${i.name.toLowerCase()}-${place.toLowerCase()}`;\r\n\r\n      return (\r\n        <li key={val}>\r\n          <input type=\"checkbox\" onClick={() => props.toggleItem(val)} />\r\n          <label className=\"ui checkbox\">{place}</label>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className={`cell medium-4 place place-${i.icon}`} key={i.name}>\r\n        <h4><SocialIcon network={i.icon} /> {i.name.toUpperCase()}</h4>\r\n        <ul className=\"\">\r\n        {places}\r\n        </ul>\r\n        \r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n        {sharePlaces}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Copyright() {\r\n  return (\r\n    <div className=\"copyrightCnt text-center\">\r\n        <a href=\"https://www.richardschwabe.de\" target=\"_blank\">&copy; 2021 - RichardSchwabe.de</a>\r\n      </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\n\nimport \"foundation-sites/dist/css/foundation.min.css\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport dateFormat from \"dateformat\";\n\nimport PlaceSelector from \"./components/PlaceSelector/PlaceSelector\";\nimport Copyright from \"./components/Copyright/Copyright\";\n\nfunction App() {\n  const [startDate, setStartDate] = useState(new Date());\n  const [url, setUrl] = useState(\"\");\n  const [campaignName, setCampaignName] = useState(\"\");\n  const [places, setPlaces] = useState({});\n\n  const [linkList, setLinkList] = useState([]);\n\n  const handleUrlChange = (event) => {\n    setUrl(event.target.value);\n  };\n\n  const handleCampaignChange = (event) => {\n    setCampaignName(event.target.value);\n  };\n\n  const generateLinks = () => {\n    console.log(\"Generating\", url, campaignName);\n    let campaignIdentifierDateString = dateFormat(startDate, \"yyyymmdd\");\n    console.log(campaignIdentifierDateString);\n\n    console.log(\"Original places\", places);\n    let addedPlaces = Object.keys(places).filter((i) => places[i] === 1);\n\n    console.log(addedPlaces);\n\n    let utmStartChar = \"?\";\n    if (url.indexOf(\"?\") > -1) {\n      utmStartChar = \"&\";\n    }\n\n    let newLinkList = [];\n    let urlUTMCampaignPart = `${utmStartChar}utm_campaign=${campaignIdentifierDateString}-${campaignName}`;\n\n    let urls = [];\n    addedPlaces.map((i) => {\n      let splittedItem = i.split(\"-\");\n      let urlUTMSource = splittedItem[0];\n      let urlUTMMedium = splittedItem[1];\n      let finalUrl = `${urlUTMCampaignPart}&utm_source=${urlUTMSource}&utm_medium=${urlUTMMedium}`;\n      urls.push(url + finalUrl);\n    });\n    setLinkList(urls);\n  };\n\n  const toggleSourceMedium = (value) => {\n    const newPlaces = { ...places };\n    if (value in newPlaces) {\n      newPlaces[value] = 0;\n    } else {\n      newPlaces[value] = 1;\n    }\n    setPlaces(newPlaces);\n  };\n\n  return (\n    <div className=\"grid-container\">\n      <h1>URL</h1>\n      <p>Enter URL you want users to visit.</p>\n      <div className=\"ui input fluid\">\n        <input\n          onChange={handleUrlChange}\n          value={url}\n          type=\"text\"\n          placeholder=\"URL....\"\n        />\n      </div>\n\n      <h2>What is the campaign name?</h2>\n      <p>Enter the campaign name that you want to use for tracking.</p>\n      <div className=\"cell small-12 \">\n        <input\n          type=\"text\"\n          placeholder=\"Campaign Name\"\n          value={campaignName}\n          onChange={handleCampaignChange}\n        />\n      </div>\n\n      <h2>When will this campaign run?</h2>\n      <DatePicker\n        selected={startDate}\n        onChange={(date) => setStartDate(date)}\n      />\n\n      <h2>Choose Campaign Source & Medium</h2>\n      <p>\n        Choose any of the source mediums, the links will automatically hold the\n        source and medium settings according to your selection.\n      </p>\n\n      <div className=\"grid-x grid-margin-x\">\n        <PlaceSelector toggleItem={toggleSourceMedium} />\n      </div>\n\n      <button className=\"success button expanded large\" onClick={generateLinks}>\n        Generate\n      </button>\n\n      <h2>Results</h2>\n      {linkList.length > 0 ? (\n        <ul className=\"results\">\n          {linkList.map((item) => (\n            <li>{item}</li>\n          ))}\n        </ul>\n      ) : (\n        <span>Generate some links first...</span>\n      )}\n\n      <Copyright />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}